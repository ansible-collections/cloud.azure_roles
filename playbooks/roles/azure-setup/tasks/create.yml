# Create Azure ResourceGroup
- name: Create resource group
  include_role:
    name: resource_group

# Create a security group to restrict access to my VMs except within the VPC
- name: Create Network security Group
  include_role:
    name: security_group

# Create a virtual network
- name: Create the networking stack
  include_role:
    name: networking_stack

# Create availability set for VMs
- name: Create availability set for the VMs
  azure_rm_availabilityset:
    resource_group: "{{ azure_resource_group }}"
    name: "{{ base_vm_name }}-avset"
    sku: Aligned    

# Get active # of VMs being load balanced
- name: List NICs for VMs
  azure_rm_loadbalancer_info:
    resource_group: "{{ azure_resource_group }}"
    name: "{{ azure_lb_name }}"
  register: lb

- name: Define actual number of VMs connected to the LB
  set_fact:
    actual_vms_pool: "{{ lb.ansible_info.azure_loadbalancers[0].properties.backendAddressPools[0].properties.backendIPConfigurations | length }}"
  when: lb.ansible_info.azure_loadbalancers | length > 0
    
- name: LB not yet created -> set vm count to 0
  set_fact:
    actual_vms_pool: 0
  when: lb.ansible_info.azure_loadbalancers | length == 0


# Add VMs/NICs when scaling up
- name: Add VMs
  block:

    # Create NIC names
    - name: Create nic names from number of instances
      set_fact:
        azure_network_interface_instances: "{{ azure_network_interface_instances + [ nic_name ] }}"
      with_sequence: start=0 count="{{ azure_number_vm }}"
      loop_control:
        loop_var: id
      vars:
        nic_name: "{{ base_vm_name }}-{{ id }}-nic"

    # Create Load Balancer and Attach NICs
    - name: Create LB w/ public ip
      include_role:
        name: load_balancer
      vars:
        azure_lb_network_interface_instances: "{{ azure_network_interface_instances }}"
        azure_lb_pip_name: '{{ azure_lb_name }}-pip'
        azure_lb_probes:
          - name: ping_server
            port: 5000
            protocol: Http
            request_path: "/"
        azure_lb_rules:
          - name: flask
            frontend_ip_configuration: "{{ azure_lb_name }}-ipconf"
            backend_address_pool: '{{ azure_lb_name }}-backendpool'
            protocol: Tcp
            frontend_port: 5000
            backend_port: 5000
            probe: ping_server
        add_to_lb: true

    # Create RHEL app VMs into the subnet
    - name: Create Virtual Machines
      include_role:
        name: virtual_machine
      vars:
        azure_vm_name: "{{ base_vm_name }}-{{ id }}"
        azure_ssh_password_enabled: 'yes'
        azure_vm_managed_disk_type: Standard_LRS
        azure_vm_os: Linux
        azure_vm_size: Standard_D4as_v4
        azure_availability_set_name: "{{ base_vm_name }}-avset"
        azure_network_interface_name: "{{ azure_network_interface_instances[ ( id | int )] }}"
      with_sequence: start=0 count="{{ azure_number_vm }}"
      loop_control:
        loop_var: id

  when: (actual_vms_pool | int) < (azure_number_vm | int)


  # Delete VMs & NICs when scaling down
- name: "Delete {{ (actual_vms_pool | int) - (azure_number_vm | int) }} VMs from Pool"
  block:
    - set_fact:
        number_to_delete: "{{ (actual_vms_pool | int) - (azure_number_vm | int) }}"

    # Delete VM & NIC
    - name: Delete Virtual Machine & associated NIC
      include_role:
        name: virtual_machine
      vars:
        operation: 'delete'
        azure_vm_name: "{{ base_vm_name }}-{{ (actual_vms_pool | int) - (item | int + 1) }}"
      with_sequence: start=0 count="{{ number_to_delete }}"

  when: (actual_vms_pool | int) > (azure_number_vm | int)


# Create Bastion Host to access VMs
- name: Create Bastion Host
  block:
    - set_fact:
        bastion_public_ip_name: "{{ base_vm_name }}-bastion-ip"
        bastion_nic_name: "{{ base_vm_name }}-bastion-nic"

    # Create Bastion VM public ip
    - name: Create public ip for Bastion VM
      azure_rm_publicipaddress:
        resource_group: "{{ azure_resource_group }}"
        allocation_method: static
        name: "{{ bastion_public_ip_name }}"
        sku: Basic
      register: public_ip

    - set_fact:
        bastion_public_ip: "{{ public_ip.state.ip_address }}"

    # Create Bastion VM NIC
    - name: Create network interface for Bastion host
      azure_rm_networkinterface:
        resource_group: "{{ azure_resource_group }}"
        name: "{{ bastion_nic_name }}"
        virtual_network: "{{ azure_virtual_network }}"
        subnet_name: "{{ azure_subnet }}"
        security_group: "{{ azure_security_group }}"
        ip_configurations:
          - name: public_ip
            public_ip_address_name: "{{ bastion_public_ip_name }}"

    # Create Bastion VM w/ NIC & IP
    - name: Create virtual machine for Bastion host
      include_role:
        name: virtual_machine
      vars:
        azure_vm_name: "{{ base_vm_name }}-bastion"
        azure_vm_size: Standard_D4as_v4
        azure_network_interface_name: "{{ bastion_nic_name }}"
        azure_vm_managed_disk_type: Standard_LRS
        add_to_lb: false

# Register public ip of application
- azure_rm_publicipaddress_info:
    resource_group: "{{ azure_resource_group }}"
    name: "{{ azure_lb_name }}-pip"
  register: app_ip

- set_fact:
    load_balancer_public_ip: "{{ app_ip.publicipaddresses[0].ip_address }}" 
