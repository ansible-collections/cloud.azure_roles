- name: Get virtual network interfaces info
  azure_rm_networkinterface_info:
    resource_group: "{{ azure_resource_group }}"
    name: "{{ base_vm_name }}{{ id }}-nic"
  register: nic_info
  with_sequence: start=0 count="{{ azure_number_vm }}"
  loop_control:
    loop_var: id

- set_fact:
    private_ip_list: >-
      {{ nic_info.results | map(attribute="networkinterfaces") | flatten 
        | map(attribute="ip_configurations") | flatten | map(attribute="private_ip_address") }}

- name: Retrieve PostgreSQL Server info
  azure_rm_postgresqlserver_info:
    resource_group: '{{ azure_resource_group }}'
    name: '{{ azure_postgresql_name }}'
  register: _server

- name: add workers hosts to inventory
  ansible.builtin.add_host:
    hostname: "host_{{ item }}"
    ansible_ssh_user: "{{ azure_vm_admin_username }}"
    ansible_ssh_pass: "{{ azure_vm_admin_password }}"
    ansible_sudo_pass: "{{ azure_vm_admin_password }}"
    ansible_ssh_common_args: -o StrictHostKeyChecking=no -o ProxyCommand="sshpass -p '{{ azure_vm_admin_password }}' ssh -W %h:%p {{ azure_vm_admin_username }}@{{ bastion_public_ip }}"
    ansible_host: "{{ item }}"
    groups: workers
    application_db:
      server: "{{ azure_postgresql_name }}"
      user: "{{ azure_postgresql_admin_username }}"
      instance: "{{ azure_postgresql_database_instances[0].name }}"
  with_items: '{{ private_ip_list }}'
  # no_log: true

- name: add bastion host to inventory
  ansible.builtin.add_host:
    hostname: "bastion"
    ansible_ssh_user: "{{ azure_vm_admin_username }}"
    ansible_ssh_pass: "{{ azure_vm_admin_password }}"
    ansible_sudo_pass: "{{ azure_vm_admin_password }}"
    ansible_host: "{{ bastion_public_ip }}"
  # no_log: true