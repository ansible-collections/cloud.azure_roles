---
- hosts: localhost
  gather_facts: no
  vars_files:
  - vars.yml
  tasks:
    # - include_role:
    #     name: resource_group
    # - include_role:
    #     name: public_ip
    #   vars:
    #     azure_public_ip_name: "{{ item }}"
    #   loop: "{{ azure_public_ips }}"
    # - include_role:
    #     name: security_group
    # - include_role:
    #     name: availability_set
    # - include_role:
    #     name: load_balancer
    # - include_role:
    #     name: network_interface
    #   vars:
    #     azure_network_interface_name: "{{ item[0] }}"
    #     azure_public_ip_name: "{{ item[1] }}"
    #   loop: "{{ azure_nw_interface_instances | zip(azure_public_ips) | list }}"
    - include_role:
        name: virtual_machine
      vars:
        azure_vm_name: "{{ item.name }}"
        azure_vm_size: "{{ item.size }}"
        azure_vm_os: "{{ item.os }}"
        azure_network_interfaces: "{{ item.nw_int }}"
      loop: "{{ azure_vm_instances }}"

    # - include_role:
    #     name: managed_postgresql


# - hosts: in_memory
#   gather_facts: no
#   become_user: "{{ azure_vm_admin_user }}"
#   vars_files:
#     - vars/main.yml

#   # https://stackoverflow.com/questions/32297456/how-to-ignore-ansible-ssh-authenticity-checking
#   tasks:
  # - name: Check SSH known_hosts for {{ inventory_hostname }}
  #   shell: ssh-keygen -F {{ inventory_hostname }}
  #   register: checkForKnownHostsEntry
  #   failed_when: false
  #   changed_when: false
  #   ignore_errors: no

  # - name: Add {{ inventory_hostname }} to SSH known hosts automatically
  #   when: checkForKnownHostsEntry.rc == 1
  #   changed_when: checkForKnownHostsEntry.rc == 1
  #   set_fact:
  #     ansible_ssh_common_args: '-o StrictHostKeyChecking=no'  

  # - name: Create test file
  #   copy:
  #     dest: /tmp/test
  #     content: "Hello from {{ inventory_hostname }}!"
