---
- name: Test security group role
  block:
    - name: Test invalid creation of security group - no resource group
      block:
        - name: Attempt to create security group without name (should fail)
          include_role:
            name: security_group
          vars:
            operation: 'create'

      rescue:
        - name: Assert correct error message
          fail:
            msg: "Task failed with incorrect error message"
          when: ansible_failed_result.msg is not match("Azure resource group name must be defined as azure_resource_group")

    - name: Set facts
      set_fact:
        resource_group: "test-sg-{{ lookup('password', '/dev/null chars=ascii_lowercase,digits length=6') }}"
        azure_region: 'canadacentral'
        azure_tags:
          cloud.azure_roles: security_group

    - name: Attempt to create security group with no name - should fail
      block:
        - name: Call security_group role with no name defined
          include_role:
            name: security_group
          vars:
            operation: 'create'
            azure_resource_group: "{{ resource_group }}"

      rescue:
        - name: Assert correct error message
          fail:
            msg: "Task failed with incorrect error message"
          when: ansible_failed_result.msg is not match("Missing parameter:\ key 'name' not found in azure_security_group")

        - name: Set security group name
          set_fact:
            sg_name: "{{ resource_group }}-sg"

    - name: Test valid creation of security group
      block:
        - name: Create security group
          include_role:
            name: security_group
          vars:
            operation: 'create'
            azure_resource_group: "{{ resource_group }}"
            azure_security_group:
              name: "{{ sg_name }}"

        - name: Get sg info
          azure_rm_securitygroup_info:
            resource_group: "{{ resource_group }}"
            name: "{{ sg_name }}"
          register: sg_info

        - name: Assert security group successfully was created with 0 custom rules
          assert:
            that:
              - sg_info.securitygroups | length == 1
              - "{{ sg_name in sg_info.securitygroups | map(attribute='name') }}"
              - sg_info.securitygroups[0].properties.securityRules | length == 0

        - name: Get resource group info
          azure_rm_resourcegroup_info:
            name: '{{ resource_group }}'
          register: rg

        - name: Assert that resource group was created
          assert:
            that:
              - rg.resourcegroups | length == 1

    - name: Test valid creation of security group with params
      block:
        - name: Update security group with rules
          include_role:
            name: security_group
          vars:
            azure_resource_group: "{{ resource_group }}"
            azure_security_group:
              name: "{{ sg_name }}"
              rules:
                - name: 'allow_ssh'
                  protocol: Tcp
                  destination_port_range:
                    - 22
                  access: Allow
                  priority: 100
                  direction: Inbound
                - name: 'allow_web_traffic'
                  protocol: Tcp
                  destination_port_range:
                    - 80
                    - 443
                  access: Allow
                  priority: 101
                  direction: Inbound
                - name: 'third_rule'
                  protocol: Tcp
                  destination_port_range:
                    - 81
                  access: Allow
                  priority: 102
                  direction: Inbound

        - name: Get security group info
          azure_rm_securitygroup_info:
            resource_group: "{{ resource_group }}"
            name: "{{ sg_name }}"
          register: sg_info

        - name: Assert user rules exist
          assert:
            that:
              - sg_info.securitygroups[0].properties.securityRules | length == 3
              - "{{ 'allow_ssh' in sg_info.securitygroups[0].properties.securityRules | map(attribute='name') }}"
              - "{{ 'allow_web_traffic' in sg_info.securitygroups[0].properties.securityRules | map(attribute='name') }}"
              - "{{ 'third_rule' in sg_info.securitygroups[0].properties.securityRules | map(attribute='name') }}"

        - name: Create VNet
          azure_rm_virtualnetwork:
            resource_group: "{{ resource_group }}"
            name: "{{ resource_group }}-vnet"
            address_prefixes_cidr:
              - '10.16.0.0/16'
              - '172.100.0.0/16'

        - name: Create Subnet
          azure_rm_subnet:
            resource_group: "{{ resource_group }}"
            name: "{{ resource_group }}-subnet-00"
            virtual_network_name: "{{ resource_group }}-vnet"
            address_prefix_cidr: '10.16.0.0/24'
            security_group: "{{ sg_name }}"

        - name: Create Second Subnet
          azure_rm_subnet:
            resource_group: "{{ resource_group }}"
            name: "{{ resource_group }}-subnet-01"
            virtual_network_name: "{{ resource_group }}-vnet"
            address_prefix_cidr: '172.100.0.0/24'
            security_group: "{{ sg_name }}"

        - name: Create a public ip
          azure_rm_publicipaddress:
            resource_group: "{{ resource_group }}"
            name: "{{ resource_group }}-pip"
            sku: Standard
            allocation_method: Static
          register: ip

        - name: Set ip
          set_fact:
            ip: "{{ ip.state.ip_address }}"

        - name: Create Network Interface with public ip
          azure_rm_networkinterface:
            resource_group: "{{ resource_group }}"
            name: "{{ resource_group }}-nic"
            security_group: "{{ sg_name }}"
            ip_configurations:
              - name: ipconf0
                public_ip_address_name: "{{ resource_group }}-pip"
            virtual_network: "{{ resource_group }}-vnet"
            subnet_name: "{{ resource_group }}-subnet-00"

        - name: Create Another Network Interface with no public ip
          azure_rm_networkinterface:
            resource_group: "{{ resource_group }}"
            name: "{{ resource_group }}-nic2"
            security_group: "{{ sg_name }}"
            ip_configurations:
              - name: ipconf1
            virtual_network: "{{ resource_group }}-vnet"
            subnet_name: "{{ resource_group }}-subnet-00"

        - name: Create a VM
          azure_rm_virtualmachine:
            resource_group: "{{ resource_group }}"
            name: "{{ resource_group }}-vm"
            network_interfaces: "{{ resource_group }}-nic"
            admin_username: 'testuser'
            admin_password: '4fB5In3ueO7,'
            image:
              offer: RHEL
              publisher: RedHat
              sku: '7-LVM'
              version: latest
            vm_size: Standard_DS1_v2

        - name: Get public ip info
          azure_rm_networkinterface_info:
            resource_group: "{{ resource_group }}"
            name: "{{ resource_group }}-pip"
          register: pip_info

        - name: Test SSH access to VM
          wait_for:
            host: "{{ ip }}"
            port: 22
            timeout: 5

        - name: Test removing first rule (ssh rule)
          include_role:
            name: security_group
          vars:
            azure_resource_group: "{{ resource_group }}"
            azure_security_group:
              name: "{{ sg_name }}"
              rules_to_remove:
                - 'allow_ssh'

        - name: Get security group info
          azure_rm_securitygroup_info:
            resource_group: "{{ resource_group }}"
            name: "{{ sg_name }}"
          register: sg_info

        - name: Assert rule was removed
          assert:
            that:
              - sg_info.securitygroups[0].properties.securityRules | length == 2
              - "{{ 'allow_ssh' not in sg_info.securitygroups[0].properties.securityRules | map(attribute='name') }}"
              - "{{ 'allow_web_traffic' in sg_info.securitygroups[0].properties.securityRules | map(attribute='name') }}"
              - "{{ 'third_rule' in sg_info.securitygroups[0].properties.securityRules | map(attribute='name') }}"

        - name: Test removing last rule
          include_role:
            name: security_group
          vars:
            azure_resource_group: "{{ resource_group }}"
            azure_security_group:
              name: "{{ sg_name }}"
              rules_to_remove:
                - 'third_rule'

        - name: Get security group info
          azure_rm_securitygroup_info:
            resource_group: "{{ resource_group }}"
            name: "{{ sg_name }}"
          register: sg_info

        - name: Assert last rule was removed
          assert:
            that:
              - sg_info.securitygroups[0].properties.securityRules | length == 1
              - "{{ 'allow_ssh' not in sg_info.securitygroups[0].properties.securityRules | map(attribute='name') }}"
              - "{{ 'allow_web_traffic' in sg_info.securitygroups[0].properties.securityRules | map(attribute='name') }}"
              - "{{ 'third_rule' not in sg_info.securitygroups[0].properties.securityRules | map(attribute='name') }}"

        - name: Test removing last remaining rule
          include_role:
            name: security_group
          vars:
            azure_resource_group: "{{ resource_group }}"
            azure_security_group:
              name: "{{ sg_name }}"
              rules_to_remove:
                - 'allow_web_traffic'

        - name: Get security group info
          azure_rm_securitygroup_info:
            resource_group: "{{ resource_group }}"
            name: "{{ sg_name }}"
          register: sg_info

        - name: Assert no user specified rules remain
          assert:
            that:
              - sg_info.securitygroups[0].properties.securityRules | length == 0

    - name: Test deletion of security group attached to nic & subnet
      block:
        - name: Get security group info
          azure_rm_securitygroup_info:
            resource_group: "{{ resource_group }}"
            name: "{{ sg_name }}"
          register: sg_info

        - name: Assert security group exists
          assert:
            that:
              - sg_info.securitygroups | length == 1
              - "{{ sg_name in sg_info.securitygroups | map(attribute='name') }}"

        - name: Delete security group & detach from any NICs or subnets
          include_role:
            name: security_group
          vars:
            operation: 'delete'
            azure_resource_group: "{{ resource_group }}"
            azure_security_group:
              name: "{{ sg_name }}"

        - name: Get security group info
          azure_rm_securitygroup_info:
            resource_group: "{{ resource_group }}"
            name: "{{ sg_name }}"
          register: sg_info

        - name: Assert security group was deleted
          assert:
            that:
              - sg_info.securitygroups | length == 0

    - name: Test deletion of security group not attached to nic or subnet
      block:
        - name: Create security group
          include_role:
            name: security_group
          vars:
            operation: 'create'
            azure_resource_group: "{{ resource_group }}"
            azure_security_group:
              name: "{{ sg_name }}"

        - name: Get sg info
          azure_rm_securitygroup_info:
            resource_group: "{{ resource_group }}"
            name: "{{ sg_name }}"
          register: sg_info

        - name: Assert security group was created
          assert:
            that:
              - sg_info.securitygroups | length == 1

        - name: Delete security group
          include_role:
            name: security_group
          vars:
            operation: 'delete'
            azure_resource_group: "{{ resource_group }}"
            azure_security_group:
              name: "{{ sg_name }}"

        - name: Get security group info
          azure_rm_securitygroup_info:
            resource_group: "{{ resource_group }}"
            name: "{{ sg_name }}"
          register: sg_info

        - name: Assert security group was deleted
          assert:
            that:
              - sg_info.securitygroups | length == 0

  always:
    - name: Delete resource group and all its content
      azure_rm_resourcegroup:
        name: "{{ resource_group }}"
        state: absent
        force_delete_nonempty: yes
      ignore_errors: yes